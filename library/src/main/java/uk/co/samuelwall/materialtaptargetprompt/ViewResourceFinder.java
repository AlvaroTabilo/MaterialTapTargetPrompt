/*
 * Copyright (C) 2016-2018 Samuel Wall
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package uk.co.samuelwall.materialtaptargetprompt;

import android.content.Context;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.graphics.drawable.Drawable;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.view.View;
import android.view.ViewGroup;

public class ViewResourceFinder implements ResourceFinder
{
    /**
     * The view that the target is or contains.
     */
    @NonNull
    private final View view;

    /**
     * Constructor.
     *
     * @param targetView The target view or containing view.
     */
    public ViewResourceFinder(@NonNull final View targetView)
    {
        this.view = targetView;
    }

    /**
     * Finds a child view with the given identifier. Returns null if the
     * specified child view does not exist.
     *
     * @param resId the identifier of the view to find
     * @return The view with the given id or null.
     */
    @Nullable
    @Override
    public View findViewById(int resId)
    {
        return this.view.getRootView().findViewById(resId);
    }

    /**
     * Get the view to add the prompt to.
     *
     * @return The view to add the prompt to.
     */
    @NonNull
    @Override
    public ViewGroup getPromptParentView()
    {
        return (ViewGroup) this.view.getRootView();
    }

    /**
     * Retrieve the Context that the prompt is running in.
     *
     * @return Context The Context used by the prompt.
     */
    @NonNull
    @Override
    public Context getContext()
    {
        return this.view.getContext();
    }

    /**
     * Returns a Resources instance for the application's package.
     *
     * @return a Resources instance for the application's package
     */
    @NonNull
    @Override
    public Resources getResources()
    {
        return this.view.getResources();
    }

    /**
     * Return the Theme object associated with {@link #getContext()}.
     */
    @NonNull
    @Override
    public Resources.Theme getTheme()
    {
        return this.view.getContext().getTheme();
    }

    /**
     * Returns a localized string from the application's package's
     * default string table.
     *
     * @param resId Resource id for the string
     * @return The string data associated with the resource, stripped of styled
     * text information.
     */
    @NonNull
    @Override
    public String getString(int resId)
    {
        return this.view.getResources().getString(resId);
    }

    /**
     * Retrieve styled attribute information in {@link #getContext()} theme.  See
     * {@link Resources.Theme#obtainStyledAttributes(int, int[])}
     * for more information.
     *
     * @param resId
     * @param attrs
     * @see Resources.Theme#obtainStyledAttributes(int, int[])
     */
    @NonNull
    @Override
    public TypedArray obtainStyledAttributes(int resId, int[] attrs)
    {
        return this.view.getContext().obtainStyledAttributes(resId, attrs);
    }

    /**
     * Returns a drawable object associated with a particular resource ID and
     * styled for the current theme.
     *
     * @param resId The desired resource identifier, as generated by the aapt
     *              tool. This integer encodes the package, type, and resource
     *              entry. The value 0 is an invalid identifier.
     * @return An object that can be used to draw this resource, or
     * {@code null} if the resource could not be resolved.
     */
    @Nullable
    @Override
    public Drawable getDrawable(int resId)
    {
        return this.view.getResources().getDrawable(resId);
    }
}
